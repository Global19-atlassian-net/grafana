{"version":3,"file":"exampleApp.fb2366366adbbbf1d38b.js","sources":["webpack:///webpack:///./public/app/plugins/app/example-app/ExampleRootPage.tsx","webpack:///webpack:///./public/app/plugins/app/example-app/config/ExamplePage1.tsx","webpack:///webpack:///./public/app/plugins/app/example-app/config/ExamplePage2.tsx","webpack:///webpack:///./public/app/plugins/app/example-app/legacy/angular_example_page.ts","webpack:///webpack:///./public/app/plugins/app/example-app/legacy/config.ts","webpack:///webpack:///./public/app/plugins/app/example-app/module.ts"],"sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { NavModelItem } from '@grafana/data';\nimport { AppRootProps } from '@grafana/ui';\n\ninterface Props extends AppRootProps {}\n\nconst TAB_ID_A = 'A';\nconst TAB_ID_B = 'B';\nconst TAB_ID_C = 'C';\n\nexport class ExampleRootPage<ExampleAppSettings> extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.updateNav();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.query !== prevProps.query) {\n      if (this.props.query.tab !== prevProps.query.tab) {\n        this.updateNav();\n      }\n    }\n  }\n\n  updateNav() {\n    const { path, onNavChanged, query, meta } = this.props;\n\n    const tabs: NavModelItem[] = [];\n    tabs.push({\n      text: 'Tab A',\n      icon: 'fa fa-fw fa-file-text-o',\n      url: path + '?tab=' + TAB_ID_A,\n      id: TAB_ID_A,\n    });\n    tabs.push({\n      text: 'Tab B',\n      icon: 'fa fa-fw fa-file-text-o',\n      url: path + '?tab=' + TAB_ID_B,\n      id: TAB_ID_B,\n    });\n    tabs.push({\n      text: 'Tab C',\n      icon: 'fa fa-fw fa-file-text-o',\n      url: path + '?tab=' + TAB_ID_C,\n      id: TAB_ID_C,\n    });\n\n    // Set the active tab\n    let found = false;\n    const selected = query.tab || TAB_ID_B;\n    for (const tab of tabs) {\n      tab.active = !found && selected === tab.id;\n      if (tab.active) {\n        found = true;\n      }\n    }\n    if (!found) {\n      tabs[0].active = true;\n    }\n\n    const node = {\n      text: 'This is the Page title',\n      img: meta.info.logos.large,\n      subTitle: 'subtitle here',\n      url: path,\n      children: tabs,\n    };\n\n    // Update the page header\n    onNavChanged({\n      node: node,\n      main: node,\n    });\n  }\n\n  render() {\n    const { path, query, meta } = this.props;\n\n    return (\n      <div>\n        QUERY: <pre>{JSON.stringify(query)}</pre>\n        <br />\n        <ul>\n          <li>\n            <a href={path + '?x=1'}>111</a>\n          </li>\n          <li>\n            <a href={path + '?x=AAA'}>AAA</a>\n          </li>\n          <li>\n            <a href={path + '?x=1&y=2&y=3'}>ZZZ</a>\n          </li>\n        </ul>\n        <pre>{JSON.stringify(meta.jsonData)}</pre>\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { PluginConfigPageProps, AppPlugin } from '@grafana/ui';\n\ninterface Props extends PluginConfigPageProps<AppPlugin> {}\n\nexport class ExamplePage1 extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const { query } = this.props;\n\n    return (\n      <div>\n        11111111111111111111111111111111\n        <pre>{JSON.stringify(query)}</pre>\n        11111111111111111111111111111111\n      </div>\n    );\n  }\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { PluginConfigPageProps, AppPlugin } from '@grafana/ui';\n\ninterface Props extends PluginConfigPageProps<AppPlugin> {}\n\nexport class ExamplePage2 extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const { query } = this.props;\n\n    return (\n      <div>\n        22222222222222222222222222222222\n        <pre>{JSON.stringify(query)}</pre>\n        22222222222222222222222222222222\n      </div>\n    );\n  }\n}\n","export class AngularExamplePageCtrl {\n  static templateUrl = 'legacy/angular_example_page.html';\n\n  /** @ngInject */\n  constructor($scope: any, $rootScope: any) {\n    console.log('AngularExamplePageCtrl:', this);\n  }\n}\n","import { PluginMeta } from '@grafana/ui';\n\nexport class ExampleConfigCtrl {\n  static templateUrl = 'legacy/config.html';\n\n  appEditCtrl: any;\n  appModel: PluginMeta;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: any) {\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n\n    // Make sure it has a JSON Data spot\n    if (!this.appModel) {\n      this.appModel = {} as PluginMeta;\n    }\n\n    // Required until we get the types sorted on appModel :(\n    const appModel = this.appModel as any;\n    if (!appModel.jsonData) {\n      appModel.jsonData = {};\n    }\n\n    console.log('ExampleConfigCtrl', this);\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      console.log('Not enabled...');\n      return;\n    }\n\n    // TODO, can do stuff after update\n    console.log('Post Update:', this);\n  }\n}\n","// Angular pages\nimport { ExampleConfigCtrl } from './legacy/config';\nimport { AngularExamplePageCtrl } from './legacy/angular_example_page';\nimport { AppPlugin } from '@grafana/ui';\nimport { ExamplePage1 } from './config/ExamplePage1';\nimport { ExamplePage2 } from './config/ExamplePage2';\nimport { ExampleRootPage } from './ExampleRootPage';\nimport { ExampleAppSettings } from './types';\n\n// Legacy exports just for testing\nexport {\n  ExampleConfigCtrl as ConfigCtrl,\n  AngularExamplePageCtrl, // Must match `pages.component` in plugin.json\n};\n\nexport const plugin = new AppPlugin<ExampleAppSettings>()\n  .setRootPage(ExampleRootPage)\n  .addConfigPage({\n    title: 'Page 1',\n    icon: 'fa fa-info',\n    body: ExamplePage1,\n    id: 'page1',\n  })\n  .addConfigPage({\n    title: 'Page 2',\n    icon: 'fa fa-user',\n    body: ExamplePage2,\n    id: 'page2',\n  });\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACvGA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAGA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AAOA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAGA;AAEA;AAEA;AACA;AAAA;;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AALA;AAMA;AAAA;AAPA;;;;;;;;;;;;;ACEA;AAAA;AAAA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA/BA;AAgCA;AAAA;AAjCA;;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}