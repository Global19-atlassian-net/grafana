{"version":3,"file":"NewDataSourcePage.fb2366366adbbbf1d38b.js","sources":["webpack:///webpack:///./public/app/features/datasources/NewDataSourcePage.tsx","webpack:///webpack:///./public/app/features/datasources/state/selectors.ts"],"sourcesContent":["import React, { PureComponent, FC } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\nimport { addDataSource, loadDataSourceTypes, setDataSourceTypeSearchQuery } from './state/actions';\nimport { getDataSourceTypes } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { DataSourcePluginMeta, List, PluginType } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSourceTypes: DataSourcePluginMeta[];\n  isLoading: boolean;\n  addDataSource: typeof addDataSource;\n  loadDataSourceTypes: typeof loadDataSourceTypes;\n  searchQuery: string;\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\n}\n\ninterface DataSourceCategories {\n  [key: string]: DataSourcePluginMeta[];\n}\n\ninterface DataSourceCategoryInfo {\n  id: string;\n  title: string;\n}\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  searchInput: HTMLElement;\n  categoryInfoList: DataSourceCategoryInfo[] = [\n    { id: 'tsdb', title: 'Time series databases' },\n    { id: 'logging', title: 'Logging & document databases' },\n    { id: 'sql', title: 'SQL' },\n    { id: 'cloud', title: 'Cloud' },\n    { id: 'other', title: 'Others' },\n  ];\n\n  sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  componentDidMount() {\n    this.props.loadDataSourceTypes();\n    this.searchInput.focus();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderTypes(types: DataSourcePluginMeta[]) {\n    if (!types) {\n      return null;\n    }\n\n    // apply custom sort ranking\n    types.sort((a, b) => {\n      const aSort = this.sortingRules[a.id] || 0;\n      const bSort = this.sortingRules[b.id] || 0;\n      if (aSort > bSort) {\n        return -1;\n      }\n      if (aSort < bSort) {\n        return 1;\n      }\n\n      return a.name > b.name ? -1 : 1;\n    });\n\n    return (\n      <List\n        items={types}\n        getItemKey={item => item.id.toString()}\n        renderItem={item => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderGroupedList() {\n    const { dataSourceTypes } = this.props;\n\n    if (dataSourceTypes.length === 0) {\n      return null;\n    }\n\n    const categories = dataSourceTypes.reduce(\n      (accumulator, item) => {\n        const category = item.category || 'other';\n        const list = accumulator[category] || [];\n        list.push(item);\n        accumulator[category] = list;\n        return accumulator;\n      },\n      {} as DataSourceCategories\n    );\n\n    categories['cloud'].push(getGrafanaCloudPhantomPlugin());\n\n    return (\n      <>\n        {this.categoryInfoList.map(category => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderTypes(categories[category.id])}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <a\n            className=\"btn btn-inverse\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=new-data-source\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            Find more data source plugins on grafana.com\n          </a>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, dataSourceTypes } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput\n                ref={elem => (this.searchInput = elem)}\n                labelClassName=\"gf-form--has-input-icon\"\n                inputClassName=\"gf-form-input width-30\"\n                value={searchQuery}\n                onChange={this.onSearchQueryChange}\n                placeholder=\"Filter by name or type\"\n              />\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            <a className=\"btn btn-secondary\" href=\"datasources\">\n              Cancel\n            </a>\n          </div>\n          <div>\n            {searchQuery && this.renderTypes(dataSourceTypes)}\n            {!searchQuery && this.renderGroupedList()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = props => {\n  const { plugin, onLearnMoreClick } = props;\n  const canSelect = plugin.id !== 'gcloud';\n  const onClick = canSelect ? props.onClick : () => {};\n\n  // find first plugin info link\n  const learnMoreLink = plugin.info.links && plugin.info.links.length > 0 ? plugin.info.links[0].url : null;\n\n  return (\n    <div className=\"add-data-source-item\" onClick={onClick} aria-label={`${plugin.name} datasource plugin`}>\n      <img className=\"add-data-source-item-logo\" src={plugin.info.logos.small} />\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{plugin.name}</span>\n        {plugin.info.description && <span className=\"add-data-source-item-desc\">{plugin.info.description}</span>}\n      </div>\n      <div className=\"add-data-source-item-actions\">\n        {learnMoreLink && (\n          <a\n            className=\"btn btn-inverse\"\n            href={`${learnMoreLink}?utm_source=grafana_add_ds`}\n            target=\"_blank\"\n            rel=\"noopener\"\n            onClick={onLearnMoreClick}\n          >\n            Learn more <i className=\"fa fa-external-link add-datasource-item-actions__btn-icon\" />\n          </a>\n        )}\n        {canSelect && <button className=\"btn btn-primary\">Select</button>}\n      </div>\n    </div>\n  );\n};\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: '',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/cloud',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'gicon gicon-add-datasources',\n    id: 'datasource-new',\n    text: 'Add data source',\n    href: 'datasources/new',\n    subTitle: 'Choose a data source type',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    dataSourceTypes: getDataSourceTypes(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourceTypes,\n  setDataSourceTypeSearchQuery,\n};\n\nexport default hot(module)(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(NewDataSourcePage)\n);\n","import { DataSourceSettings, DataSourcePluginMeta } from '@grafana/ui';\nimport { DataSourcesState } from '../../../types/datasources';\nimport { UrlQueryValue } from '@grafana/runtime';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database);\n  });\n};\n\nexport const getDataSourceTypes = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.dataSourceTypes.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings | null => {\n  if (state.dataSource.id === parseInt(dataSourceId as string, 10)) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAsBA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAoCA;AACA;AACA;;AA0EA;AA3HA;AACA;AACA;AACA;AAUA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAaA;AAMA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AAWA;AAEA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AASA;AACA;AAIA;AACA;AACA;AAKA;AACA;AAAA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAQA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;ACvQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;A","sourceRoot":""}